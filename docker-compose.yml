version: "3.8"

services:
  nextjs_app:
    build:
      context: ./quananqr1
      dockerfile: Dockerfile
    container_name: nextjs-app
    ports:
      - "3000:3000"
    volumes:
      - ./quananqr1/src:/app/src
      - ./quananqr1/public:/app/public
      - ./quananqr1/.env:/app/.env
      - ./quananqr1/.env.local:/app/.env.local
    environment:
      - NODE_ENV=development
      - WATCHPACK_POLLING=true
    networks:
      - app-network
    depends_on:
      mypostgres_ai:
        condition: service_healthy
    restart: unless-stopped
  mypostgres_ai:
    image: postgres:15-alpine
    container_name: ai-postgres
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: mydatabase
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - ai-postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d mydatabase"]
      interval: 10s
      timeout: 5s
      retries: 5

  go_app_ai:
    build:
      context: ./golang
      dockerfile: Dockerfile
    container_name: english-golang-ai
    ports:
      - "8888:8888"
      - "50051:50051"
    networks:
      - app-network
    environment:
      - APP_ENV=docker
      - DB_HOST=mypostgres_ai
      - DB_USER=myuser
      - DB_PASSWORD=mypassword
      - DB_NAME=mydatabase
      - DB_PORT=5432
    depends_on:
      mypostgres_ai:
        condition: service_healthy
    restart: unless-stopped

  # -------------------------------  nextjs -------------------------------
  # next-app:
  #   container_name: next-app1
  #   build:
  #     context: ./nextjs
  #     dockerfile: Dockerfile
  #     #args:
  #     #  DB_HOST: http://shop-golang:8888
  #   environment:
  #     - NETX_PUBLIC_DB_HOST=http://shop-golang:8888
  #   command:
  #     - /bin/sh
  #     - -c
  #     - |
  #       npm run build
  #       npm start
  #   networks:
  #     - app-network
  #   depends_on:
  #     - go_app
  #   ports:
  #     - "3000:3000"
  # environment:
  #   NEXT_PUBLIC_DB_HOST: environment-nextapp

  # -------------------------------  admin -------------------------------
  # admin-app:
  #   container_name: next-app-admin
  #   build:
  #     context: ./admin
  #     dockerfile: Dockerfile
  #     args:
  #       - NEXT_PUBLIC_DB_HOST=http://shop-golang:8888

  #   environment:
  #     - NEXT_PUBLIC_DB_HOST=http://shop-golang:8888
  #   command:
  #     - /bin/sh
  #     - -c
  #     - |
  #       npm run build
  #       npm start
  #   networks:
  #     - app-network
  #   depends_on:
  #     - go_app
  #   ports:
  #     - "4001:3000"

  # -------------------------------  nginx -------------------------------
  # nginx:
  #   build:
  #     context: ./4.nginx/
  #   container_name: nginx_reverse_proxy
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./4.nginx/config/nginx/default.conf:/etc/nginx/conf.d/default.conf
  #     # - ./nextjs/.next:/usr/share/nginx/html

  #     # - ./4.nginx/logs/access.log:/var/log/nginx/access.log
  #   networks:
  #     - app-network

  #   depends_on:
  #     - admin-app
  # -------------------------------   -------------------------------
# networks:
#   app-network:
#     driver: bridge
# volumes:
#   ai-postgres-data:

# build: a -> b -> c -> start: a - b - c
# commit - nextjs -> clone -> build image /push -> pull -> run
# commut - shop-golang -> .....
#
#
#

# - /bin/sh
#   - -c
#   - |
#     npm run build
#     npm start

networks:
  app-network:
    driver: bridge

volumes:
  ai-postgres-data:
    driver: local
