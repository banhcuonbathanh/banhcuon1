// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: ecomm-grpc-python/ielts/proto/ielts.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PythonService_ProcessData_FullMethodName = "/proto.PythonService/ProcessData"
)

// PythonServiceClient is the client API for PythonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PythonServiceClient interface {
	ProcessData(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataResponse, error)
}

type pythonServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPythonServiceClient(cc grpc.ClientConnInterface) PythonServiceClient {
	return &pythonServiceClient{cc}
}

func (c *pythonServiceClient) ProcessData(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataResponse)
	err := c.cc.Invoke(ctx, PythonService_ProcessData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PythonServiceServer is the server API for PythonService service.
// All implementations must embed UnimplementedPythonServiceServer
// for forward compatibility.
type PythonServiceServer interface {
	ProcessData(context.Context, *DataRequest) (*DataResponse, error)
	mustEmbedUnimplementedPythonServiceServer()
}

// UnimplementedPythonServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPythonServiceServer struct{}

func (UnimplementedPythonServiceServer) ProcessData(context.Context, *DataRequest) (*DataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessData not implemented")
}
func (UnimplementedPythonServiceServer) mustEmbedUnimplementedPythonServiceServer() {}
func (UnimplementedPythonServiceServer) testEmbeddedByValue()                       {}

// UnsafePythonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PythonServiceServer will
// result in compilation errors.
type UnsafePythonServiceServer interface {
	mustEmbedUnimplementedPythonServiceServer()
}

func RegisterPythonServiceServer(s grpc.ServiceRegistrar, srv PythonServiceServer) {
	// If the following call pancis, it indicates UnimplementedPythonServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PythonService_ServiceDesc, srv)
}

func _PythonService_ProcessData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PythonServiceServer).ProcessData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PythonService_ProcessData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PythonServiceServer).ProcessData(ctx, req.(*DataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PythonService_ServiceDesc is the grpc.ServiceDesc for PythonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PythonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PythonService",
	HandlerType: (*PythonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessData",
			Handler:    _PythonService_ProcessData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ecomm-grpc-python/ielts/proto/ielts.proto",
}
